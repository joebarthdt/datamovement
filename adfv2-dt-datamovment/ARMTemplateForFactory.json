{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "adfv2-dt-datamovment"
		},
		"AzureBlobStorageLabStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageLabStorage'"
		},
		"AzureSqlDatabaseDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseDB'"
		},
		"EnterpriseProd_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'EnterpriseProd'"
		},
		"EnterpriseProd_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'EnterpriseProd'"
		},
		"ProcessProd_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ProcessProd'"
		},
		"ProcessProd_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ProcessProd'"
		},
		"joescomputerLS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'joescomputerLS'"
		},
		"joescomputerLS_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'joescomputerLS'"
		},
		"AzureBlobStorageSourceDatasetEntity1_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "Address.csv"
		},
		"AzureBlobStorageSourceDatasetEntity1_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "demo"
		},
		"AzureDataLakeStorageGen2_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@activity('uspGetSink').output.firstRow.sinkValue"
		},
		"AzureDataLakeStoreDataDestination1_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@dataset().FileName"
		},
		"AzureDataLakeStoreDataDestination1_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().FolderPath"
		},
		"AzureDataLakeStoreDataDestination2_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@CONCAT('DeltaCopyfromDB_using_ControlTable-', pipeline().RunId, '.txt')"
		},
		"AzureDataLakeStoreDataDestination2_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@dataset().FolderPath"
		},
		"AzureDataLakeStoreFileDynamic_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "@activity('uspGetSink').output.firstRow.sinkValue"
		},
		"AzureDataLakeStorageGen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dtadlsgen2.dfs.core.windows.net"
		},
		"AzureDataLakeStoreDynamic_properties_typeProperties_dataLakeStoreUri": {
			"type": "string",
			"defaultValue": "https://passdevdatalake.azuredatalakestore.net/webhdfs/v1"
		},
		"AzureDataLakeStoreDynamic_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "4bc7b452-73c9-4301-ace5-fff7e1d3f97f"
		},
		"AzureDataLakeStoreDynamic_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "47eece0b-9fab-4016-befa-6cb504cf566f"
		},
		"AzureDataLakeStoreDynamic_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "PASSsummit2018"
		},
		"AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://pass-dev-kvd2.vault.azure.net/"
		},
		"EnterpriseProd_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "COEXIST\\jbarth"
		},
		"ProcessProd_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "COEXIST\\jbarth"
		},
		"joescomputerLS_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "COEXIST\\jbarth"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Copy data from on premise SQL Server to SQL Azure Initialload')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy data from on premise SQL Server to SQL Azure.\n\nYou can also go to \"Copy Data Tool\" to get the pipeline for more connectors and scenarios.",
				"activities": [
					{
						"name": "tblProcess sqltoazure",
						"description": "Copy data from SQL server to SQL Azure",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": 10000,
								"preCopyScript": "TRUNCATE TABLE  [stg].[tblProcess]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "tblProcess",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "aztblProcess",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "tblProcessStatusDimension",
						"description": "Copy data from SQL server to SQL Azure",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": 10000,
								"preCopyScript": "TRUNCATE TABLE  [stg].[tblProcessStatusDimension]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "tblProcessStatusDimensionDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tblProcessStatusDimensionDT",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "tblProcessTypeDimension",
						"description": "Copy data from SQL server to SQL Azure",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": 10000,
								"preCopyScript": "TRUNCATE TABLE  [stg].[tblProcessTypeDimension]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "tblProcessTypeDimensionDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tblProcessTypeDimensionDT",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "tblProcessRunHistory",
						"description": "Copy data from SQL server to SQL Azure",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT * FROM [dbo].[tblProcessRunHistory] a WITH (NOLOCK)\nWHERE a.RowLoadTimeStamp >= DATEADD(DAY,-1,GETDATE())"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": 10000,
								"preCopyScript": "TRUNCATE TABLE  [stg].[tblProcessRunHistory]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "tblProcessRunHistoryDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tblProcessRunHistoryDT",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "mergetblProcessRunHistory",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "tblProcessRunHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "scd2DimProcess",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "scd0DimProcessStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "scd0DimProcessType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "scd0DimProcessGroup",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "scd0DimWorkflowFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "scd0DimProcessOwner",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[concat('[', 'dbo].[mergetblProcessRunHistory]')]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "scd2DimProcess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "tblProcess sqltoazure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[concat('[', 'dbo].[scd2DimProcess]')]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "scd0DimProcessStatus",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "tblProcessStatusDimension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[concat('[', 'dbo].[scd0DimProcessStatus]')]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "scd0DimProcessType",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "tblProcessTypeDimension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[concat('[', 'dbo].[scd0DimProcessType]')]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "scd0DimProcessGroup",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "tblProcess sqltoazure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[concat('[', 'dbo].[scd0DimProcessGroup]')]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "scd0DimWorkflowFolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "tblProcess sqltoazure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[concat('[', 'dbo].[scd0DimWorkflowFolder]')]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "scd0DimProcessOwner",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "tblProcess sqltoazure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[concat('[', 'dbo].[scd0DimProcessOwner]')]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "processControl"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tblProcess')]",
				"[concat(variables('factoryId'), '/datasets/aztblProcess')]",
				"[concat(variables('factoryId'), '/datasets/tblProcessStatusDimensionDS')]",
				"[concat(variables('factoryId'), '/datasets/tblProcessStatusDimensionDT')]",
				"[concat(variables('factoryId'), '/datasets/tblProcessTypeDimensionDS')]",
				"[concat(variables('factoryId'), '/datasets/tblProcessTypeDimensionDT')]",
				"[concat(variables('factoryId'), '/datasets/tblProcessRunHistoryDS')]",
				"[concat(variables('factoryId'), '/datasets/tblProcessRunHistoryDT')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataflowCopy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Run dataflow with Explicit copy to ingest copy source",
				"activities": [
					{
						"name": "LoadData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "ParquetSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "AzureBlobStorageSourceDatasetEntity1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "StagingParquet1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Trasformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "LoadData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Trasformation1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"computeType": "General",
								"coreCount": 8,
								"dataTransformationUnits": 4
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBlobStorageSourceDatasetEntity1')]",
				"[concat(variables('factoryId'), '/datasets/StagingParquet1')]",
				"[concat(variables('factoryId'), '/dataflows/Trasformation1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MovieDemoPipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteMovieDemoDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MovieDemo1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Movies": {},
									"Output": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureBlobStorageLabStorage",
									"type": "LinkedServiceReference"
								}
							},
							"compute": {
								"computeType": "General",
								"coreCount": 8
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MovieDemo1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemo1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TaxiDemoDataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TaxiDemo1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TripData": {},
									"TripFare": {},
									"VendorStatsSink": {},
									"DayStatsSink": {},
									"TotalPaymentByPaymentType": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "AzureBlobStorageLabStorage",
									"type": "LinkedServiceReference"
								}
							},
							"compute": {
								"computeType": "General",
								"coreCount": 8
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TaxiDemo1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copySink')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SQLtoADLS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "uspGetSink",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "@activity('uspGetSink').output.firstRow.sourceValue",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "AzureBlobFSSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTableDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureDataLakeStorageGen2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "uspGetSink",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[concat('[', 'adf].[uspGetSink]')]",
								"storedProcedureParameters": {
									"sinkName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sinkName",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "AzureSqlTableDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"parameters": {
					"sinkName": {
						"type": "String",
						"defaultValue": "SalesLT_Address"
					}
				},
				"folder": {
					"name": "dynamic"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDB')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataLakeStorageGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copySinkLoops')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "uspSinkLoop",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[concat('[', 'adf].[uspSinkLoop]')]",
								"storedProcedureParameters": {
									"sinkgroup": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.sinkGroup",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "AzureSqlTableDB",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachCopySink",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "uspSinkLoop",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('uspSinkLoop').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Execute copySink",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "copySink",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sinkName": {
												"value": "@item().sinkName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"sinkGroup": {
						"type": "String",
						"defaultValue": "dim_group"
					}
				},
				"folder": {
					"name": "dynamic"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDB')]",
				"[concat(variables('factoryId'), '/pipelines/copySink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageSourceDatasetEntity1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLabStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('AzureBlobStorageSourceDatasetEntity1_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlobStorageSourceDatasetEntity1_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorageGen2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlobFSFile",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"folderPath": {
						"value": "[parameters('AzureDataLakeStorageGen2_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStoreDataDestination1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your data destination store.",
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStoreDynamic",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureDataLakeStoreFile",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"treatEmptyAsNull": true
					},
					"fileName": {
						"value": "[parameters('AzureDataLakeStoreDataDestination1_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('AzureDataLakeStoreDataDestination1_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStoreDynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStoreDataDestination2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your destination data store.",
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStoreDynamic",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureDataLakeStoreFile",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"treatEmptyAsNull": true
					},
					"fileName": {
						"value": "[parameters('AzureDataLakeStoreDataDestination2_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": {
						"value": "[parameters('AzureDataLakeStoreDataDestination2_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStoreDynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStoreFileDynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStoreDynamic",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dynamic"
				},
				"annotations": [],
				"type": "AzureDataLakeStoreFile",
				"typeProperties": {
					"format": {
						"type": "JsonFormat",
						"filePattern": "setOfObjects"
					},
					"folderPath": {
						"value": "[parameters('AzureDataLakeStoreFileDynamic_properties_typeProperties_folderPath')]",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStoreDynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseDataSource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your data source store.",
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[xuyetable]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseDataSource2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "DataSourceTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseExternal_ControlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "The external control table is used to store the partition list of data source tables.",
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseExternal_ControlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "External control table to store high water mark value.",
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dynamic"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": ""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CADOutput1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLabStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencyDatasetCAD1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLabStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Currency_CAD.txt",
						"container": "demo"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencyDatasetUSD1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLabStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Currency_USD.txt",
						"container": "demo"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWHTEST_DATAWAREHOUSE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "joescomputerLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/joescomputerLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataDestination1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connect to your data destination store.",
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimensionDimDate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "EnterpriseProd",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"typeProperties": {
					"tableName": "[concat('[', 'dimension].[DimDate]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/EnterpriseProd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetDestinationStore1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLabStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "polybase"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StagingParquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLabStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "file.parquet",
						"folderPath": "dataflow",
						"container": "staging"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemoDayStatsSink1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLabStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemoTotalByPaymentType1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLabStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemoVendorStatsSink1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLabStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/USDOutput1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLabStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/aztblProcess')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "process"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "[concat('[', 'stg].[tblProcess]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dimensionDimDateAZ')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "[concat('[', 'dimension].[DimDate]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie_dataflow_sink1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLabStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "movie_results",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie_dataflow_source1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLabStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "movies.csv",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxi_trip_data_input1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLabStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "trip_data_1.csv",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxi_trip_fare_input1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLabStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "trip_fare_1.csv",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLabStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblProcess')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connect to your data source store.",
				"linkedServiceName": {
					"referenceName": "ProcessProd",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "process"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[tblProcess]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ProcessProd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblProcessRunHistoryDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ProcessProd",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "process"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[tblProcessRunHistory]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ProcessProd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblProcessRunHistoryDT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "process"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "[concat('[', 'stg].[tblProcessRunHistory]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblProcessStatusDimensionDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ProcessProd",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "process"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[tblProcessStatusDimension]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ProcessProd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblProcessStatusDimensionDT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "process"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "[concat('[', 'stg].[tblProcessStatusDimension]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblProcessTypeDimensionDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ProcessProd",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "process"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[tblProcessTypeDimension]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ProcessProd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tblProcessTypeDimensionDT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "process"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "[concat('[', 'stg].[tblProcessTypeDimension]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageLabStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageLabStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorageGen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorageGen2_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStoreDynamic')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeStore",
				"typeProperties": {
					"dataLakeStoreUri": "[parameters('AzureDataLakeStoreDynamic_properties_typeProperties_dataLakeStoreUri')]",
					"tenant": "[parameters('AzureDataLakeStoreDynamic_properties_typeProperties_tenant')]",
					"subscriptionId": "[parameters('AzureDataLakeStoreDynamic_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureDataLakeStoreDynamic_properties_typeProperties_resourceGroupName')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntimeEUS",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeEUS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseDB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EnterpriseProd')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('EnterpriseProd_connectionString')]",
					"userName": "[parameters('EnterpriseProd_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('EnterpriseProd_password')]"
					}
				},
				"connectVia": {
					"referenceName": "JoesComputer",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/JoesComputer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessProd')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ProcessProd_connectionString')]",
					"userName": "[parameters('ProcessProd_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ProcessProd_password')]"
					}
				},
				"connectVia": {
					"referenceName": "JoesComputer",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/JoesComputer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/joescomputerLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('joescomputerLS_connectionString')]",
					"userName": "[parameters('joescomputerLS_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('joescomputerLS_password')]"
					}
				},
				"connectVia": {
					"referenceName": "JoesComputer",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/JoesComputer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Copy data from on premise SQL Server to SQL Azure Initialload",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-04-01T23:22:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								48
							],
							"hours": [
								14
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Copy data from on premise SQL Server to SQL Azure Initialload')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JoesComputer')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntimeEUS')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Currency Converter1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Sample demo data flow to convert currencies",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CurrencyDatasetUSD1",
								"type": "DatasetReference"
							},
							"name": "USDCurrency",
							"script": "source(output(\n\t\tPreviousConversionRate as double,\n\t\tCountry as string,\n\t\tDateTime1 as string,\n\t\tCurrentConversionRate as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> USDCurrency",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "CurrencyDatasetCAD1",
								"type": "DatasetReference"
							},
							"name": "CADSource",
							"script": "source(output(\n\t\tPreviousConversionRate as double,\n\t\tCountry as string,\n\t\tDateTime1 as string,\n\t\tCurrentConversionRate as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> CADSource",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "USDOutput1",
								"type": "DatasetReference"
							},
							"name": "USDSink",
							"script": "ConditionalSplit1@USD sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> USDSink"
						},
						{
							"dataset": {
								"referenceName": "CADOutput1",
								"type": "DatasetReference"
							},
							"name": "CADSink",
							"script": "ConditionalSplit1@CAD sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> CADSink"
						}
					],
					"transformations": [
						{
							"name": "Union",
							"description": "The Union combines 2 streams together",
							"script": "USDCurrency, CADSource union(byName: true)~> Union"
						},
						{
							"name": "NewCurrencyColumn",
							"description": "Create a new calculated column from currency rate",
							"script": "Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn"
						},
						{
							"name": "ConditionalSplit1",
							"description": "Split the data on state to create 2 streams",
							"script": "NewCurrencyColumn split(Country == 'USD',\n\tCountry == 'CAD',\n\tdisjoint: false) ~> ConditionalSplit1@(USD, CAD)"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CurrencyDatasetUSD1')]",
				"[concat(variables('factoryId'), '/datasets/CurrencyDatasetCAD1')]",
				"[concat(variables('factoryId'), '/datasets/USDOutput1')]",
				"[concat(variables('factoryId'), '/datasets/CADOutput1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MovieDemo1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movie_dataflow_source1",
								"type": "DatasetReference"
							},
							"name": "Movies",
							"script": "source(output(\n\t\tmovieId as string,\n\t\ttitle as string,\n\t\tgenres as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Movies",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "movie_dataflow_sink1",
								"type": "DatasetReference"
							},
							"name": "Output",
							"script": "MoviesYear sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> Output"
						}
					],
					"transformations": [
						{
							"name": "MoviesYear",
							"script": "Movies derive(year = toInteger(trim(right(title, 6), '()')),\n\t\ttitle = toString(left(title, length(title)-6))) ~> MoviesYear"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movie_dataflow_source1')]",
				"[concat(variables('factoryId'), '/datasets/movie_dataflow_sink1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxiDemo1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "taxi_trip_data_input1",
								"type": "DatasetReference"
							},
							"name": "TripData",
							"script": "source(output(\n\t\tmedallion as string,\n\t\thack_license as string,\n\t\tvendor_id as string,\n\t\trate_code as string,\n\t\tstore_and_fwd_flag as string,\n\t\tpickup_datetime as string,\n\t\tdropoff_datetime as string,\n\t\tpassenger_count as short,\n\t\ttrip_time_in_secs as long,\n\t\ttrip_distance as double,\n\t\tpickup_longitude as double,\n\t\tpickup_latitude as double,\n\t\tdropoff_longitude as double,\n\t\tdropoff_latitude as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> TripData",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "taxi_trip_fare_input1",
								"type": "DatasetReference"
							},
							"name": "TripFare",
							"script": "source(output(\n\t\tmedallion as string,\n\t\t{ hack_license} as string,\n\t\t{ vendor_id} as string,\n\t\t{ pickup_datetime} as string,\n\t\t{ payment_type} as string,\n\t\t{ fare_amount} as double,\n\t\t{ surcharge} as double,\n\t\t{ mta_tax} as double,\n\t\t{ tip_amount} as double,\n\t\t{ tolls_amount} as double,\n\t\t{ total_amount} as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> TripFare",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TaxiDemoVendorStatsSink1",
								"type": "DatasetReference"
							},
							"name": "VendorStatsSink",
							"script": "AggregateVendorStats sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> VendorStatsSink"
						},
						{
							"dataset": {
								"referenceName": "TaxiDemoDayStatsSink1",
								"type": "DatasetReference"
							},
							"name": "DayStatsSink",
							"script": "AggregateDayStats sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> DayStatsSink"
						},
						{
							"dataset": {
								"referenceName": "TaxiDemoTotalByPaymentType1",
								"type": "DatasetReference"
							},
							"name": "TotalPaymentByPaymentType",
							"script": "AggregateByPaymentType sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> TotalPaymentByPaymentType"
						}
					],
					"transformations": [
						{
							"name": "JoinMatchedData",
							"script": "TripData, TripFare join(hack_license == { hack_license}\n\t&& TripData@medallion == TripFare@medallion\n\t&& vendor_id == { vendor_id}\n\t&& pickup_datetime == { pickup_datetime},\n\tjoinType:'inner',\n\tbroadcast: 'none')~> JoinMatchedData"
						},
						{
							"name": "AggregateVendorStats",
							"script": "JoinMatchedData aggregate(groupBy(vendor_id),\n\tpassenger_count = round(sum(passenger_count), 2),\n\t\ttrip_time_in_secs = round(sum(trip_time_in_secs)/60, 2),\n\t\ttrip_distance = round(sum(trip_distance), 2),\n\t\tTotalTripFare = round(sum({ total_amount}), 2)) ~> AggregateVendorStats"
						},
						{
							"name": "AggregateDayStats",
							"script": "JoinMatchedData aggregate(groupBy(DayOfTheWeek = dayOfWeek(toDate(pickup_datetime,'yyyy-mm-dd hh:mm:ss'))),\n\ttrip_distance = round(avg(trip_distance), 2),\n\t\tpassenger_count = round(avg(passenger_count), 2),\n\t\ttrip_time_in_secs = round(avg(trip_time_in_secs)/60, 2),\n\t\taverage_fare = round(avg({ total_amount}), 2)) ~> AggregateDayStats"
						},
						{
							"name": "AggregateByPaymentType",
							"script": "TripFare aggregate(groupBy({ payment_type}),\n\teach(match(type=='double'), concat($$, '_total') = round(sum ($$)))) ~> AggregateByPaymentType"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/taxi_trip_data_input1')]",
				"[concat(variables('factoryId'), '/datasets/taxi_trip_fare_input1')]",
				"[concat(variables('factoryId'), '/datasets/TaxiDemoVendorStatsSink1')]",
				"[concat(variables('factoryId'), '/datasets/TaxiDemoDayStatsSink1')]",
				"[concat(variables('factoryId'), '/datasets/TaxiDemoTotalByPaymentType1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trasformation1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "StagingParquet1",
								"type": "DatasetReference"
							},
							"name": "source1",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn: 'filename') ~> source1",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetDestinationStore1",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"script": "source1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> sink1"
						}
					],
					"transformations": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/StagingParquet1')]",
				"[concat(variables('factoryId'), '/datasets/ParquetDestinationStore1')]"
			]
		}
	]
}